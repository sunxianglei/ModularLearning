apply plugin: 'maven'
def POM_NAME = 'biz_home'
def POM_VERSION = '1.0.0'
def POM_ARTIFACT_ID = 'biz_home'
def POM_GROUP_ID = 'com.sun.biz'
def POM_PACKAGING = 'aar'
def USERNAME = 'admin'
def PASSWORD = 'admin123'
def REPOSITORY_URL = 'http://localhost:8081/repository/sun/'
def REPOSITORY_URL_SNAPSHOT = 'http://localhost:8081/repository/sun-snapshot/'

def getPomVersion(pomVersion) {
    String version = pomVersion
    if(isSnapshot.toBoolean()) {
        version += "-SNAPSHOT"
    }
    return version
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: REPOSITORY_URL_SNAPSHOT) {
                authentication(userName: USERNAME, password: PASSWORD)
            }
            repository(url: REPOSITORY_URL) {
                authentication(userName: USERNAME, password: PASSWORD)
            }
            pom.project {
                version getPomVersion(POM_VERSION)
                artifactId POM_ARTIFACT_ID
                groupId POM_GROUP_ID
                packaging POM_PACKAGING
            }
        }
    }
}

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 打包main目录下代码和资源的task，生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

//配置需要上传到maven仓库的文件
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

